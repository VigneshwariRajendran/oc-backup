pipeline {
    agent any
    environment {
        WORKING_DIR = '/opt/mytell/root-app'
        OPENSHIFT_REGISTRY = 'default-route-openshift-image-registry.apps.mytellcluster.9stx.p1.openshiftapps.com'
        OPENSHIFT_SERVER = 'https://api.mytellcluster.9stx.p1.openshiftapps.com:6443'
        NAMESPACE = 'jenkins-poc'
        OPENSHIFT_TOKEN = credentials('openshift-token')
        APP_NAME = 'root-app'
        IMAGE_NAME = "${OPENSHIFT_REGISTRY}/${NAMESPACE}/${APP_NAME}:latest"
    }
    stages {
        stage('Login to OpenShift') {
            steps {
                script {
                    sh "oc login ${OPENSHIFT_SERVER} --token=${OPENSHIFT_TOKEN}"
                    
                }
            }
        }

        stage('Verify Directory') {
            steps {
                echo "Verifying the working directory: ${WORKING_DIR}"
                dir("${WORKING_DIR.trim()}") {
                    sh 'ls -l'  // List files in the directory to confirm Dockerfile is present
                }
            }
        }

        stage('Build Image') {
            steps {
                echo "Switching to working directory: ${WORKING_DIR}"
                dir("${WORKING_DIR.trim()}") {
                    echo "Building container image..."
                    sh "podman build --cgroup-manager=cgroupfs --no-cache -t root-app:latest ."
                }
            }
        }

        stage('Tag Image') {
            steps {
                echo "Tagging the image for OpenShift registry..."
                dir("${WORKING_DIR.trim()}") {
                    sh "podman tag ${APP_NAME}:latest ${IMAGE_NAME}"
                }
            }
        }
        stage('Login to OpenShift Registry') {
            steps {
                script {
                    echo "Logging into OpenShift registry..."
                    // Authenticate with OpenShift registry using the OC token
                    sh "oc whoami -t | podman login --username=unused --password-stdin ${OPENSHIFT_REGISTRY}"
                }
            }
        }
        stage('Push Image') {
            steps {
                echo "Pushing the image to OpenShift registry..."
                dir("${WORKING_DIR.trim()}") {
                    sh "podman push ${IMAGE_NAME}"
                }
            }
        }

        stage('Deploy to OpenShift') {
            steps {
                echo "Deploying the application in OpenShift..."
                sh "oc new-app ${IMAGE_NAME} --name=${APP_NAME}"
                sh "oc expose service/${APP_NAME}"
            }
        }
    }
    post {
        success {
            echo 'Deployment successful!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
===================================================================================
Dockerfile
===================================================================================
# Stage 1: Build the React application
FROM node:16 AS builder

# Set working directory
WORKDIR /app

# Copy package.json and package-lock.json
COPY package*.json ./

# Install dependencies
USER root
RUN npm install

# Ensure binaries are executable
RUN chmod -R +x /app/node_modules/.bin/

# Copy the entire source code
COPY . .

# Build the React application for POC
RUN npm run build && ls -la /app/dist

# Stage 2: Serve the React application using httpd
FROM docker.io/httpd

# Switch to root to create directories that require root privileges
USER root

# Copy built files from the builder stage to the NGINX serving directory
COPY --from=builder /app/dist /usr/local/apache2/htdocs/

# Create the missing directory
RUN mkdir -p /usr/local/apache2/conf.modules.d

#To Rename the old httpd.conf
RUN mv /usr/local/apache2/conf/httpd.conf /usr/local/apache2/conf/httpd.conf.old

# Copy your custom HTTPD configuration (optional)
COPY ./httpd.conf /usr/local/apache2/conf/
